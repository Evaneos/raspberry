{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { createServer, connect } from 'net';\nimport { ConsoleLogger } from 'nightingale';\n\nconst argv = require('minimist')(process.argv.slice(2));\nconst logger = new ConsoleLogger('server');\n\nconst serverClients = new Map();\nlet client;\n\nconst server = createServer(socket => {\n    logger.info('client connected');\n    let mac;\n\n    socket.on('end', function() {\n        logger.info('client disconnected');\n        if (mac && serverClients.get(mac).socket === socket) {\n            serverClients.delete(mac);\n        }\n\n        if (mac && client) {\n            client.write('disconnected: ' + mac + ';');\n        }\n    });\n\n    socket.on('data', function(data) {\n        const string = data.toString();\n\n        if (string === 'ping') {\n            socket.write('pong;');\n            return;\n        }\n\n        logger.debug('data', { string: string });\n\n        string.split(';').forEach((string) => {\n            if (string === '') {\n                return;\n            }\n\n            const splittedString = string.split(': ');\n\n            if (string === 'ping') {\n                return socket.write('pong;');\n            }\n\n            if (splittedString.length !== 2) {\n                logger.warn('unexpected format', { string, length: splittedString.length });\n                return socket.end();\n            }\n\n            const [instruction, value] = splittedString;\n\n            switch (instruction) {\n                case 'ping':\n                    socket.write('pong;');\n                    break;\n\n                case 'hello':\n                    const [macAddress, ip] = value.split(',');\n                    mac = macAddress;\n                    serverClients.set(mac, { socket, ip });\n\n                    if (client) {\n                        client.write(`connected: ${mac},${ip};`);\n                    }\n\n                    break;\n\n                case 'mac':\n                    mac = value;\n                    serverClients.set(mac, { socket });\n\n                    if (client) {\n                        client.write(`connected: ${mac};`);\n                    }\n\n                    break;\n\n                default:\n                    logger.warn('unsupported instruction by client', { mac, instruction, value });\n                    return socket.end();\n            }\n        });\n    });\n});\n\nserver.listen(argv.port || 3007, () => {\n    logger.info('listening');\n});\n\n(function openSocket() {\n    client = connect(argv.socketWebserver || __dirname + '/../../socket-webserver', () => {\n        logger.info('connected to web server');\n        const keys = [];\n        for (let key of serverClients.keys()) {\n            keys.push(key);\n        }\n\n        client.write('connected-clients: ' + keys.map(key => `${key}|${serverClients.get(key).ip}`).join(',') + ';');\n    });\n\n    client.setKeepAlive(true);\n    client.on('error', (err) => {\n        client = null;\n        logger.error(err.message);\n\n        setTimeout(() => openSocket(), 1000);\n    });\n\n    client.on('data', function(data) {\n        const string = data.toString();\n        logger.debug('data', { string: string });\n\n        string.split(';').forEach((string) => {\n            const [instruction, value] = string.split(': ');\n\n            switch (instruction) {\n                case 'pong':\n                    break;\n\n                case 'url':\n                case 'change-url':\n                case 'refresh':\n                    const [mac, url] = value.split(',', 2);\n                    const socket = serverClients.get(mac).socket;\n                    if (socket) {\n                        socket.write(instruction + ': ' + url);\n                    }\n\n                    break;\n\n                default:\n                    logger.warn('unsupported instruction', { instruction, value });\n                    break;\n            }\n        });\n    });\n})();\n"]}